import org.gradle.api.tasks.bundling.Jar

/* (c) https://github.com/MontiCore/monticore */
plugins {
  id "java"
  id "monticore" version "$mc_version" // MontiCore Plugin
  id "maven-publish"
  id "com.github.johnrengelman.shadow" version "4.0.4"
  id 'org.ec4j.editorconfig' version "0.0.3"
}

def commons_version = "1.7.10-SNAPSHOT"
def grammar_classifier = "grammars"
def grammarDir = "src/main/grammars"

group = "de.monticore.lang"
description = "Sequence Diagram DSL"
sourceCompatibility = "1.8"


// configure non-standard source sets
sourceSets {
  main {
    java.srcDirs += ["$projectDir/target/generated-sources/monticore/sourcecode"]
  }
  test {
    java.srcDirs += ["$projectDir/target/generated-test-sources/monticore/sourcecode"]
  }
}
subprojects {
  apply plugin: 'idea'
  idea {
    module {
      testSourceDirs += file("$projectDir/target/generated-test-sources/monticore/sourcecode")
    }
  }
}
buildDir = file("$projectDir/target")

configurations { grammar }

dependencies {
  //implementation "de.se_rwth.commons:se-commons-logging:$commons_version"
  //implementation "de.se_rwth.commons:se-commons-utilities:$commons_version"
  //implementation "com.google.guava:guava:23.0"

  implementation "org.antlr:antlr4-runtime:4.7.1"
  implementation "de.monticore:monticore-runtime:${project.properties['mc_version']}"
  implementation "de.monticore:monticore-grammar:${project.properties['mc_version']}"
  implementation "de.monticore:monticore-grammar:${project.properties['mc_version']}:$grammar_classifier"

  grammar "de.monticore:monticore-grammar:${project.properties['mc_version']}:$grammar_classifier"
  //implementation "ch.qos.logback:logback-classic:1.1.7"
  implementation "commons-cli:commons-cli:1.4"

  // libraries for sd diff
  implementation("de.se_rwth:automata-library:1.1-SNAPSHOT") {
    exclude group: "com.google.guava", module: "guava"
  }
  compileOnly 'org.projectlombok:lombok:1.18.12'
  annotationProcessor 'org.projectlombok:lombok:1.18.12'

  testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"
  testImplementation "org.junit.jupiter:junit-jupiter-engine:5.6.2"
  testImplementation "org.junit.jupiter:junit-jupiter-params:5.6.2"
  testImplementation "org.junit.vintage:junit-vintage-engine:5.6.2"
}

repositories {
  maven {
    credentials.username mavenUser
    credentials.password mavenPassword
    url repo
  }
  mavenLocal()
}

def grammarDependencies = ext {
  SDBasis = []
  SD4Development = ["SDBasis"]
}

// one task per grammar file
fileTree(grammarDir).matching { include '**/*.mc4' }.each {
  def g = it
  def grammarName = it.getName().substring(0, it.getName().lastIndexOf('.'))

  task "generateGrammar${grammarName}"(type: MCTask) {
    grammar = file g
    outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
    // handcodedPath file("$projectDir/src/main/java")
    def grammarIncludingPackage = file(grammarDir).toURI().relativize(g.toURI()).toString()
    def uptoDate = incCheck(grammarIncludingPackage)
    outputs.upToDateWhen { uptoDate }
  }
}

compileJava {
  tasks.findAll { task -> task.name.startsWith("generateGrammar") }.each {
    def grammarName = it.getName().substring('generateGrammar'.length())
    def dependsOnGrammars = grammarDependencies[grammarName].collect { name -> tasks["generateGrammar${name}"] }
    it.dependsOn dependsOnGrammars
    /*it.outputs.upToDateWhen {
        it.outputs.upToDateWhen && !dependsOnGrammars.any { !it.outputs.upToDateWhen }
    }*/
  }

  dependsOn project.collect { it.tasks.findAll { task -> task.name.startsWith("generateGrammar") } }
}

compileTestJava {
  dependsOn project.collect { it.tasks.withType(MCTask) }
}

test {
  useJUnit()
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'
    showStackTraces = true
    showStandardStreams = true
  }

  // listen to standard out and standard error of the test JVM(s)
  onOutput { descriptor, event ->
    logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
  }
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

// build sources jar in addition
task sourcesJar(type: Jar) {
  from sourceSets.main.allJava
  archiveClassifier = "sources"
}

// build javadoc jar in addition
task javadocJar(type: Jar) {
  from javadoc
  archiveClassifier = "javadoc"
}

// generated java doc contains errors, disable for now
javadoc.failOnError(false)

// build grammar jar as well
task grammarJar(type: Jar) {
  from("$projectDir/src/main/grammars/") { include "**/*.mc4" }
  archiveClassifier = "grammars"
}

shadowJar {
  archiveFileName = 'SD4DevelopmentCLI.jar'
  archiveClassifier = "cli"
  manifest {
    attributes('Main-Class': 'de.monticore.lang.sd4development.SD4DevelopmentCLI')
  }
}

jar.dependsOn(shadowJar)

//jar {
//  manifest {
//    attributes(
//      'Main-Class': 'de.monticore.lang.sd4development.SD4DevelopmentCLI'
//    )
//  }
//  from {
//    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//  }
//}

task testReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/allTests")
  // Include the results from the 'test' task
  reportOn tasks.withType(Test)
}

// configure deployment
publishing {
  // configure what artifacts to publish
  publications {
    mavenJava(MavenPublication) {
      artifactId = "$project.name"
      from components.java
      artifact sourcesJar
      artifact javadocJar
      artifact shadowJar
      artifact grammarJar
    }
  }
  repositories.maven {
    credentials.username mavenUser
    credentials.password mavenPassword
    def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
    def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
    url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
  }
}

task buildAll(type: GradleBuild) {
  tasks = [ 'build' ]
}
