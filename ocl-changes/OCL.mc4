package ocl.monticoreocl;

grammar OCL extends de.monticore.common.Common, siunit.monticoresiunit.SI {

	/*========================================================================*/
    /*============================ PRODUCTIONS  ==============================*/
    /*========================================================================*/

    /*====================== HEADER DEFINITIONS ==============================*/


	CompilationUnit =
		("package" package:(Name& || ".")+ ";")?
		(ImportStatement)*
		OCLFile;

	/** ASTOCLFile represents a file that contains an OCL-Constraint.
        @attribute Stereotype
                   Optional Stereotype.
        @attribute name
                   Name of OCLFile (necessary for MCCompilationUnit)
        @attribute OCLConstraints
                   List of OCL-constraints.
    */
    // Note: Prefix should be only "ocl" (-> Context Condition). On the
    //       other side this should not prevent using "ocl" as identifiers.
    //       Therefore this is not defined as terminal symbol.

	OCLFile =
        Stereotype?
        prefix:Name
        fileName:Name "{"
        oclConstraints:OCLConstraint*
        "}"
        ;

     /** ASTOCLConstraint defines operationconstraints or invariants with
        stereotypes.
        @attribute Stereotype
                   Optional Stereotype.
        @attribute OCLRawConstraint
                   Interface that represents an ASTOCLOperationConstraint or an
                   ASTOCLInvariant.
    */
    OCLConstraint implements OCLDefinition =
        Stereotype?
        OCLRawConstraint;


    /** ASTOCLRawConstraint subsumes invariants and method-/constructor-
        specifications.
    */
    interface OCLRawConstraint;

     /** ASTOCLDefinition subsumes all OCL types that are used as embedded OCL.
        An OCLDefinition is a Constraint (Invariant or Method- or
        ConstructorSpec) or an abstract expression (oclexpression).
    */
    interface OCLDefinition;


	/** ASTOCLOperationSignature subsumes method and constructor signatures.
    */
	interface OCLOperationSignature;



	OCLTaggedExpr = "<<" (OCLExpression | OCLDeclaration) ("," (OCLExpression | OCLDeclaration))* ">>" ;



	/** ASTOCLOperationConstraint represents the typical method or constructor
        specifications with pre- and post-conditions.
        @attribute OCLTaggedExpr
        		   is needed in cases like "<<special, author = "mustermann">> context...." , e.g. taggedvalues1.ocl

        @attribute OCLNestedContainer
        		   is needed in cases like "context List<Message> .... , e.g. prepost4.ocl
        @attribute OCLOperationSignature
                   Operation Signature (of a method or constructor).
        @attribute OCLLetDeclaration
                   Optional let-declarations.
        @attribute OCLPreStatement
                   Optional pre-statements.
        @attribute OCLPostStatement
                   Optional post-statements.
    */
	symbol scope OCLOperationConstraint implements OCLRawConstraint =

        OCLTaggedExpr?
        "context"
        OCLTaggedExpr?
        OCLNestedContainer?
        OCLOperationSignature
       	OCLLetDeclaration?
        OCLPreStatement?
        OCLPostStatement?;


	/** ASTOCLInvariant represents the typical invariant definitions of OCL.

        @attribute OCLClassContext
        		   Optional keyword definitions: (context|import) and class definition
        @attribute name
                   Name of the invariant.
        @attribute OCLParameters
                   Optional parameters of the invariant.
        @attribute statements
                   List of boolean expressions.
    */
	symbol scope OCLInvariant implements OCLRawConstraint =
        OCLClassContext?
        "inv" name:Name?
        /*OCLExpression* */
        OCLParameters?
         ":"
        (statements:OCLExpression ";")+
        ;


    /** ASTOCLClassContext represents the OCL-Context-Clause of an invariant.
        @attribute contextType
                   Type of context (context or import)
    */
    OCLClassContext =
    	(context:["context"] | Import:["import"])
		contextDefinitions:OCLContextDefinition
    	("," contextDefinitions:OCLContextDefinition)*
    	;


	symbol scope OCLContextDefinition =
		className:QualifiedName (Name ("in" expression:OCLExpression)?)? (",")?
		;

	/** ASTOCLPreStatement represents a list of pre-statements subsumed to a
        pre-condition.
        @attribute name
                   Optional name of pre-condition.
        @attribute statements
                   List of boolean expressions.
    */

	symbol scope OCLPreStatement  =
        "pre" Name? ":"
        (statements:OCLExpression+ ";")+;


 /** ASTOCLPostStatement represents a list of post-statements subsumed to a
        post-condition.
        @attribute name
                   Optional name of post-conditions.
        @attribute statements
                   List of boolean expressions.
    */

	symbol scope OCLPostStatement  =
        "post" Name? ":"
        (statements:OCLExpression+ ";")+;


	/** ASTOCLMethodSignature defines the signature of a Java5 method.
        @attribute Type
                   Optional primitive type that is returned by given method, e.g. int, boolean etc.
        @attribute returnType
                   Optional complex type that is returned by given method
        @attribute className
                   Name of the method's class.
        @attribute Name
                   Name of given method.
        @attribute OCLParameters
                   Parameter declarations of given method.
        @attribute OCLThrowsClause
                   Optional throwables.
    */
	symbol scope OCLMethodSignature implements OCLOperationSignature =
        (Type | "void")?
        returnType:Name?
        (className:Name ".")? methodName:Name
        OCLParameters
        OCLThrowsClause?;


    /** ASTOCLConstructorSignature defines signature of a constructor.
        @attribute ReferenceType
                   Type of the Constructor.
        @attribute OCLParameters
                   Parameters of constructor.
        @attribute OCLThrowsClause
                   Optional throwables.
    */
    symbol scope OCLConstructorSignature implements OCLOperationSignature =
        "new" referenceType:Name
        OCLParameters
        OCLThrowsClause?;


    /** ASTOCLParameters defines a list of parameter declarations (can also be
        empty)
    */
    OCLParameters =
        "("
        (
          params:OCLParameterDeclaration
          ("," params:OCLParameterDeclaration)*
        )?
        ")";

    /** ASTOCLParameterDeclaration defines declarations. It contains to alternatives:

        - 1st alternative expresses statements like "int a" or enumerations of that sort like "int a, boolean b, ..."
        - 2nd alternative expresses the same but with container names like "List<Set>" or enumerations of that form
    */
    symbol scope OCLParameterDeclaration  =
        Type varName:Name
        |
        OCLNestedContainer varName:Name
        ;

	 /** ASTOCLThrowsClause defines throwables for a method or constructor
        signature.
        @attribute throwables
                   List of throwables.
    */
    symbol scope OCLThrowsClause =
        "throws" throwables:Name
        ("," throwables:Name)*;

 /*=========================== COMPREHENSION ==============================*/
    /*================== (also see OCLComprehensionPrimary) ==================*/


 /** ASTOCLComprehensionExpr defines comprehension kinds.
        e.g.:
            - {x in y | x > 0} (OCLComprehensionVarDeclaratorStyle)
            - {x * x | x in y} (OCLComprehensionExpressionStyle)
            - {1..3, x..10, y} (OCLComprehensionEnumerationStyle)
    */
      interface OCLComprehensionExpr;

      /** ASTOCLComprehensionVarDeclaratorStyle defines a comprehension with given
        characteristic.
        @attribute generator
                   A collection declaration (e.g. "int x in y" or "Auction a" as
                   shortform of "Auction a in Auction.allInstances").
        @attribute comprehensionItems
                   Characterization of comprehension as a list of
                   comprehension-items.
    */
    OCLComprehensionVarDeclaratorStyle implements OCLComprehensionExpr
    	=
    	generator:OCLCollectionVarDeclaration "|"
    	comprehensionItems:OCLComprehensionItem
    	("," comprehensionItems:OCLComprehensionItem)*;



 	/** ASTOCLComprehensionExpressionStyle defines a comprehension with given
        characteristic.
        @attribute expression
                   An expression (e.g. "x*x").
        @attribute comprehensionItems
                   Characterization of comprehension as a list of
                   comprehension-items. This can be generators, vardefinitions
                   or filters. Note that we assume at least one generator
                   (e.g. x in Y) in here.
    */
    OCLComprehensionExpressionStyle implements OCLComprehensionExpr
    	=
    	OCLExpression "|"
    	comprehensionItems:OCLComprehensionItem
    	("," comprehensionItems:OCLComprehensionItem)*
    	;


  /** ASTOCLComprehensionEnumerationStyle is used for an enumeration of
        comprehension elements. Note that collection items are optional.
        @attribute collectionItems
                   Enumerated elements as a list separated by , (comma).
                   (e.g.: "1..3, x, y..z")
    */
    OCLComprehensionEnumerationStyle implements OCLComprehensionExpr
    	=

    	OCLCollectionItem* (",")?
    	;

    /** ASTOCLCollectionItem is a single comprehension item or a valuation,
        e.g. {1..5}
    */
    OCLCollectionItem = (  OCLExpression  ".."  OCLExpression )

    					|
    					(OCLExpression ("," OCLExpression)*)
    					;


   /** ASTOCLComprehensionItem defines items of a comprehension.
    */
    interface OCLComprehensionItem;


 /* ============================== DECLARATORS ============================*/

 	/** ASTOCLDeclaration defines declarations of variables and methods, that
        are used in let-constructs.
    */
 	interface OCLDeclaration;

 	/** ASTOCLVariableDeclaration defines a local variable in a let declaration
        or a comprehension.
        @attribute OCLNestedContainer
        		   enables statements like "List<...> var = ..."
        @attribute className
        		   enables statements like "Auction var = ..."
        @attribute Type
                   Optional type.
        @attribute name
                   Name of the variable.
        @attribute OCLExpression
                   Definition as an expression (right hand of the assignment).
    */
 	 symbol scope OCLVariableDeclaration implements OCLDeclaration, OCLComprehensionItem =

        OCLNestedContainer?
        className:Name?
        Type?
        varName:Name
        "=" OCLExpression
        |
        "(" OCLVariableDeclaration  ")";


     /** ASTOCLMethodDeclaration defines internal helping methods in let
        constructs, e.g. "max(int a, int b) = if (a>b) then ...".
        @attribute ReturnType
                   Optional returntype of method.
        @attribute name
                   Name of method.
        @attribute OCLParameters
                   List of parameters (can also be emtpy).
        @attribute OCLExpression
                   Method definition as an expression (right hand of the
                   assignment).
    */
     symbol scope OCLMethodDeclaration implements OCLDeclaration =
        returnType:Name?
        Name
        OCLParameters
        "=" OCLExpression
        |
        "(" OCLMethodDeclaration ")";


 	 /** ASTOCLCollectionVarDeclaration defines expressions like
        "int x in {1, 3, 5}".
    */

	OCLCollectionVarDeclaration implements OCLComprehensionItem =
       OCLCollectionVarDeclaration OCLInExpr
      |
      OCLInExpr
      ;

    OCLInExpr = OCLInWithType | OCLInWithOutType ;

    OCLInWithType = (Type | className:Name)
          			varName:Name
          			("in" expression:OCLExpression)?
          			(",")?
          			;

    OCLInWithOutType = Name
          			  "in"
          			  (expression:OCLExpression | OCLPrimary)
          			  (",")?
          			  ;



 	/*============================= EXPRESSIONS ==============================*/

 	 /** ASTOCLExpression produces expressions that are used in OCL.
        This rule is used for parsing only.
    */
    interface OCLExpression extends OCLComprehensionItem;

    /** ASTOCLIfThenElseExpr defines an if-clause in ocl style. It differs from
        Java5: if ... then ... else .... /!\ else is NOT optional.
        @attribute condition
                   If-expression (as a condition with boolean type).
        @attribute thenExpression
                   Then-expression (executed if condition is true).
        @attribute elseExpression
                   Else-expression (executed if condition is false).
    */

     OCLIfThenElseExpr   implements OCLExpression =
        "if" condition:OCLExpression
        "then" thenExpression:OCLExpression
        "else" elseExpression:OCLExpression
        |
        "("  OCLIfThenElseExpr ")";


     /** The ASTOCLTypeIfExpr is an alternative to InstenceofExpression.
        It combines instanceof and if-then-else.
        @attribute unknownType
                   A variable as Name that will be checked.
        @attribute Type
                   Type that has to be matched.
        @attribute thenExpression
                   If variable has given type then-expr will be executed.
        @attribute elseExpression
                   If variable has not given type else-expr will be executed.
    */
     OCLTypeIfExpr implements OCLExpression =
        "typeif" unknownType:Name "instanceof" (Type | OCLNestedContainer )
        "then" thenExpression:OCLExpression
        "else" elseExpression:OCLExpression
        |
        "(" OCLTypeIfExpr  ")";


    /** ASTOCLConditionalExpr is equivalent to Java5-?-operator.
        @attribute condition
                   Conditional expression.
        @attribute thenExpression
                   Then expression.
        @attribute elseExpression
                   Else expression.
    */
	OCLConditionalExpr implements OCLExpression =
     	condition:OCLEquivalentExpr
		"?" thenExpression:OCLExpression
		":" elseExpression:OCLExpression
		|
		"(" OCLConditionalExpr  ")"
		;

	ast OCLConditionalExpr =
		condition:OCLExpression
		;

    /** ASTOCLForAllExpr defines a quantified expression for collections e.g.
        "forall x in Y : ...".
        @attribute OCLCollectionVarDeclaration
                   List of collection variable declarations, e.g. "forall a in A: ..."
        @attribute OCLNestedContainer
        		   expresses statements like " forall a in List <..> : ..."
        @attribute varName
        		   expresses statements like "forall a: ..."
        @attribute OCLExpression
                   The body of forall iteration as an expression.

    */

   OCLForallExpr implements OCLExpression =
        "forall"
         OCLCollectionVarDeclaration?
         OCLNestedContainer?
         varName:Name?
        ":"
        OCLExpression
        |
       "(" OCLForallExpr ")"
        ;

    /** ASTOCLExistsExpr defines a quantified expression for collections e.g.
        "exists x in Y : ...".
        @attribute OCLCollectionVarDeclaration
                   List of collection variable declarations, e.g. "exists a in A: ..."
        @attribute OCLNestedContainer
        		   expresses statements like "exists a in List <..> : ..."
        @attribute varName
        		   expresses statements like "exists a: ..."
        @attribute OCLExpression
                   The body of forall iteration as an expression.

    */

    OCLExistsExpr implements OCLExpression =
        "exists"
        OCLCollectionVarDeclaration?
         OCLNestedContainer?
         varName:Name?
        ":"
        OCLExpression
        |
        "(" OCLExistsExpr ")"
        ;


    /** ASTOCLAnyExpr defines iterations with all objects of a collection e.g.
        any x in set or any Auction.
        @attribute OCLExpression
                   A collection defined by an expression.
    */
    OCLAnyExpr  implements OCLExpression =
        "any" OCLExpression;

    /** ASTOCLLetinExpr are used to define local vars or methods. The defined
        vars and methods are visible in the in-expression.
        @attribute declarations
                   A list of variable or method declarations.
        @attribute OCLExpression
                   An expression where previous declarations are used.
    */
     OCLLetinExpr implements OCLExpression =
        "let" (declarations:OCLDeclaration ";")+
        "in" OCLExpression
        |
        "(" OCLLetinExpr  ")"
        ;

     /** ASTOCLLetDeclaration represents a list of let-declarations inside of a
        let-statement. This contains variable- or method-declarations.
        @attribute declarations
                   List of variable- or method-declarations.
    */
     OCLLetDeclaration implements OCLExpression =
        "let" (declarations:OCLDeclaration ";")+;


    /** ASTOCLIterateExpr is used to iterate collections. It differs from
        Java5-Iterator.
        Example:
            iterate{ elem in Auction; int acc=0 : acc = acc+elem.numberOfBids }.
        @attribute iterationDeclarator
                   The elements of a collection that will be iterated as an
                   OCLCollectionVarDeclaration.
        @attribute initDeclarator
                   Definiton of a accumulation variable as an OCLDeclaration.
        @attribute accumulatorName
                   Name of the accumulation assignment variable.
        @attribute accumulatorValue
                   Right hand of the accumulation as an expression.
    */
     OCLIterateExpr implements OCLExpression =
        "iterate" "{"
        iterationDeclarator:OCLCollectionVarDeclaration ";"
        initDeclarator:OCLDeclaration ":"
        accumulatorName:Name "=" accumulatorValue:OCLExpression
        "}";


    OCLInfixExpression;

    ast OCLInfixExpression astimplements ASTOCLExpression =
    	left:OCLExpression
    	operator:String
    	right:OCLExpression
    ;

    /** ASTOCLEquivalentExpr defines logical equivalence, e.g. a && !a <=> true
        @attribute leftHand
                   LeftHand of equivalence.
        @attribute operator
                   The infix operator.
        @attribute rightHand
                   RightHand of equivalence.
    */
	OCLEquivalentExpr implements OCLExpression =
		left:OCLEquivalentExpr "<=>" right:OCLEquivalentExpr
		|
		( "(" paren:OCLEquivalentExpr ")" | nextHigherPrec:OCLDoubleLogicalAND)
		;

	 /** ASTOCLDoubleLogicalANDExpr defines a logical AND-concatenation,
        e.g. true && a.

        @attribute leftHand
                   LeftHand of AND-concatenation.
        @attribute operator
                   The infix operator.
        @attribute rightHand
                   RightHand of AND-concatenation.
    */
	OCLDoubleLogicalAND implements OCLExpression =
		left:OCLDoubleLogicalAND "&&" right:OCLDoubleLogicalAND
		|
		( "(" paren:OCLDoubleLogicalAND ")" | nextHigherPrec:OCLIsin )
		;

	/** ASTOCLIsIn defines an element-in-collection-check,
        e.g. 5 isin Set{4, 5}
        @attribute leftHand
                   An element.
        @attribute operator
                   The infix operator.
        @attribute rightHand
                   A collection.
    */
	OCLIsin implements OCLExpression =
		left:OCLIsin ( "isin" | "in" ) right:OCLIsin
		|
		( "(" paren:OCLIsin ")" | nextHigherPrec:OCLImplies )
		;

    /** ASTOCLImpliesExpr defines logical implication, e.g. a implies c > 5
        @attribute leftHand
                   LeftHand of implication.
        @attribute operator
                   The infix operator.
        @attribute rightHand
                   RightHand of implication.
    */
    OCLImplies implements OCLExpression =
    	left:OCLImplies "implies" right:OCLImplies
        |
        ( "(" paren:OCLImplies ")" | nextHigherPrec:OCLCompare )
        ;

    /** ASTOCLCompareExpr defines a comparison between operands,
        e.g. 5 < a or 7 >= b
        @attribute leftHand
                   LeftHand of comparison.
        @attribute operator
                   The infix operator.
        @attribute rightHand
                   RightHand of comparison.
    */
    OCLCompare implements OCLExpression =
    	left:OCLCompare operator:["<" | "<=" | ">" | ">="] right:OCLCompare
    	|
    	( "(" paren:OCLCompare ")" | nextHigherPrec:OCLShiftExpr )
    	;

	/** ASTOCLShiftExpr defines a logical shift operation, e.g. a << 5
        @attribute leftHand
                   LeftHand of shift operation.
        @attribute operator
                   The infix operator.
        @attribute rightHand
                   RightHand of shift operation.
    */
	OCLShiftExpr implements OCLExpression =
		left:OCLShiftExpr operator:["<<" | ">>" | ">>>"] right:OCLShiftExpr
		|
		( "(" paren:OCLShiftExpr ")" | nextHigherPrec:OCLBinaryPlusMinusExpr )
		;

	/** ASTOCLBinaryPlusMinusExpr defines an addition or subtraction,
        e.g. a + 5 or b - 3
        @attribute leftHand
                   LeftHand of addition or subtraction.
        @attribute operator
                   The infix operator.
        @attribute rightHand
                   RightHand of addition or subtraction.
    */
	OCLBinaryPlusMinusExpr implements OCLExpression =
		left:OCLBinaryPlusMinusExpr operator:["+" | "-"] right:OCLBinaryPlusMinusExpr
		|
		( "(" paren:OCLBinaryPlusMinusExpr ")" | nextHigherPrec:OCLBinaryMultDivModExpr )
		;

	/** ASTOCLBinaryMultDivModExpr defines a multiplication, division or modulo
        operation, e.g. a * 5 or b / 3 or c % 2.
        @attribute leftHand
                   LeftHand of multiplication, division or modulo operation.
        @attribute operator
                   The infix operator.
        @attribute rightHand
                   RightHand of multiplication, division or modulo operation.
    */
	OCLBinaryMultDivModExpr implements OCLExpression =
		left:OCLBinaryMultDivModExpr operator:["*" | "/" | "%"] right:OCLBinaryMultDivModExpr
		|
		( "(" paren:OCLBinaryMultDivModExpr ")"  | nextHigherPrec:OCLDoubleLogicalORExpr )
	    ;

	/** ASTOCLDoubleLogicalORExpr defines a logical OR-concatenation,
        e.g. true || a
        @attribute leftHand
                   LeftHand of OR-concatenation.
        @attribute operator
                   The infix operator.
        @attribute rightHand
                   RightHand of OR-concatenation.
    */
	OCLDoubleLogicalORExpr implements OCLExpression =
		left:OCLDoubleLogicalORExpr "||"  right:OCLDoubleLogicalORExpr
		|
		( "(" paren:OCLDoubleLogicalORExpr ")" | nextHigherPrec:OCLSingleLogicalORExpr )
		;

     /** ASTOCLSingleLogicalORExpr defines a binary OR-concatenation, e.g. 5 | a.

        @attribute leftHand
                   LeftHand of OR-concatenation.
        @attribute operator
                   The infix operator.
        @attribute rightHand
                   RightHand of OR-concatenation.
    */
	OCLSingleLogicalORExpr implements OCLExpression =
		left:OCLSingleLogicalORExpr "|" right:OCLSingleLogicalORExpr
		|
		( "(" paren:OCLSingleLogicalORExpr ")" | nextHigherPrec:OCLLogicalXORExpr)
		;

     /** ASTOCLLogicalXORExpr defines a binary XOR-concatenation, e.g. 5 ^ a.
        @attribute leftHand
                   LeftHand of XOR-concatenation.
        @attribute operator
                   The infix operator.
        @attribute rightHand
                   RightHand of XOR-concatenation.
    */
	OCLLogicalXORExpr implements OCLExpression =
		left:OCLLogicalXORExpr "^" right:OCLLogicalXORExpr
		|
		( "(" paren:OCLLogicalXORExpr ")" | nextHigherPrec:OCLSingleLogicalANDExpr )
		;

     /** ASTOCLSingleLogicalANDExpr defines a binary AND-concatenation,
        e.g. 5 & a
        @attribute leftHand
                   LeftHand of AND-concatenation.
        @attribute operator
                   The infix operator.
        @attribute rightHand
                   RightHand of AND-concatenation.
    */
	OCLSingleLogicalANDExpr implements OCLExpression =
		left:OCLSingleLogicalANDExpr "&" right:OCLSingleLogicalANDExpr
		|
		( "(" paren:OCLSingleLogicalANDExpr ")" | nextHigherPrec:OCLRelationalExpr )
		;

    /** ASTOCLRelationalExpr defines a relation between operands,
        e.g. 5 == a or true != b.

        @attribute leftHand
                   LeftHand of relation.
        @attribute operator
                   The infix operator.
        @attribute rightHand
                   RightHand of relation.
    */
	OCLRelationalExpr implements OCLExpression =
		left:OCLRelationalExpr operator:["==" | "!="] right:OCLRelationalExpr
		|
		( "(" paren:OCLRelationalExpr ")" | nextHigherPrec:OCLInstanceofExpr )
		;

   	/** ASTOCLInstanceofExpr defines an instance-of-type-check, e.g. an
        instance of Integer.
    */
   	OCLInstanceofExpr implements OCLExpression =
   		left:OCLInstanceofExpr "instanceof" right:OCLInstanceofExpr
		|
		( "(" paren:OCLInstanceofExpr ")" | nextHigherPrec:OCLPrefixExpression )
		;

   	/** ASTOCLPrefixExpression defines prefix expressions, e.g. "!x" or "-a".
        @attribute operator
                   The prefix operator.
        @attribute operator
                   The prefix operator.
        @attribute Expression
                   The expression.
    */
    OCLPrefixExpression implements OCLExpression =
    	operator:["-" | "+" | "~" | "!"] OCLExpression
    	|
    	OCLTypeCastExpression
    	|
    	OCLPrimary
    	;

    OCLTypeCastExpression =
    	"(" (Type|OCLNestedContainer) ")" OCLPrefixExpression
    	;

    ast OCLTypeCastExpression astimplements ASTOCLExpression;

	OCLSimpleExpr implements OCLPrimary =
		Type Name
	 	|
	 	"(" OCLSimpleExpr ")"
	 	;

 	OCLConcatenation implements OCLPrimary =
 		Name ("." Name)*
	 	|
	 	"(" OCLConcatenation  ")"
	 	;

   	OCLNestedContainer implements OCLPrimary =
   		OCLContainerOrName ("<" OCLNestedContainer ">")?
   		;

	OCLContainerOrName =
		container:["Set" | "List" | "Collection"]
		|
		Name
		;

    interface OCLLiteral extends OCLPrimary;

    OCLNonNumberLiteral implements OCLLiteral =
    	value:Literal
    	;

    OCLNumberLiteral implements OCLLiteral =
       value:Number
       ;

   /*============================= OCL PRIMARYS =============================*/
   /** ASTOCLPrimary defines primaries of OCL.
    */
    interface OCLPrimary;

    OCLParenthizedExpr  implements OCLPrimary =
        "(" OCLExpression ")" ("." qualification:OCLPrimary)?;


    /** ASTOCLComprehensionPrimary represents comprehensions.
        @attribute Type
                   Optional type of comprehension, e.g. Set, List or Collection.
        @attribute expression
                   Expression of comprehension.
        @attribute qualification
                   Optional Qualification.
    */

    OCLComprehensionPrimary implements OCLPrimary =


        (container:["Set" | "List" | "Collection"])?
        (
           "<" referenceParameter:Type ">"
        )?
        "{" expression:OCLComprehensionExpr? "}"

        ("." qualification:OCLPrimary)?
        |
        "{" OCLComprehensionPrimary "}"
        ;

    /** ASTOCLQualifiedPrimary represents qualified identifier.
        @attribute prefixIdentifier
                   Value of first part of a qualified identifier. It is null if
                   we have this, super or result as prefix.
        @attribute this
                   Is true if we have a this prefix.
        @attribute super
                   Is true if we have a super prefix.
        @attribute result
                   Is true if we have a result prefix.
        @attribute qualifications
                   List of qualifications of qualified identifier.
        @attribute postfixQualification
                   Optional argument-, array- or atpre, **-qualifcation.
        @attribute OCLQualifiedPrimary
                   Optional recursive linkage of qualified primary.
    */


        OCLQualifiedPrimary implements OCLPrimary =

        (
          this:["this"]
          |
          super:["super"]
          |
          res:["result"]

          |
          prefixIdentifier:Name
        )

        ("." qualifications:Name)*

        (
          postfixQualification:OCLQualification
          ("." OCLQualifiedPrimary)?
        )?
        |
        "(" paren:OCLQualifiedPrimary  ")";



   /** ASTOCLQualification defines qualification postfixes of a qualified
        primary. A qualification is one of the three kinds:
            - x[0] (ArrayQualification)
            - x(y) (ArgumentQualification)
            - x** or xAtpre (PostfixQualification)
    */
    interface OCLQualification;

   /** ASTOCLArrayQualification represents an array qualification.
        @attribute arguments
                   The array arguments (indices).
    */
	 OCLArrayQualification implements OCLQualification=
        ("[" arguments:OCLExpression "]")+
        |
        "(" OCLArrayQualification  ")";


    /** ASTOCLArgumentQualification represents the arguments of a method call.
        @attribute arguments
                   Arguments of method call.
    */
     OCLArgumentQualification implements OCLQualification =
        					"(" (OCLExpression ("," OCLExpression)*)? ")"
        					(".")?
        					|
        					"(" OCLArgumentQualification  ")"
        					;


    /** ASTOCLPostfixQualification represents a ATpre or ** qualification.
        @attribute postfix
                   Kind of postfix: atpre or **.
        @attribute OCLQualification
                   Optional qualification.
    */
   OCLPostfixQualification implements OCLQualification =
        (atpre:["@pre"] | transitive:["**"])
        OCLQualification?;


    /** ASTOCLIsnewPrimary represents isnew-function.
        @attribute OCLExpression
                   Argument of isnew-operation.
      */

        OCLIsnewPrimary  implements OCLPrimary =
        		"isnew" "(" OCLExpression ")"
        		|
        		"("  OCLIsnewPrimary  ")";

      /** ASTOCLDefinedPrimary represents defined-function.
        @attribute OCLExpression
                   Argument of defined-operation.
    */

   		 OCLDefinedPrimary implements OCLPrimary =
        		"defined" "(" OCLExpression ")"
        		|
        		"("  OCLDefinedPrimary ")";


	ast OCLPrimary astextends ASTOCLExpression;
}
