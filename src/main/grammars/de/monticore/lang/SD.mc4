package de.monticore.lang;

component grammar SD extends de.monticore.lang.SDBase,
                             de.monticore.types.MCBasicTypes,
                             de.monticore.expressions.CommonExpressions {

    start SDArtifact;

    SDArtifact =
        ("package" MCQualifiedName& ";")?
        MCImportStatement*
        SequenceDiagram
    ;



    CompleteModifier implements MatchModifier =
        "complete" | "(c)"
    ;

    FreeModifier implements MatchModifier =
        "free" | "..."
    ;

    InitialModifier implements MatchModifier =
        "initial"
    ;

    VisibleModifier implements MatchModifier =
        "visible"
    ;



    scope SDActivity implements SDElement =
        "{"
            SDElement*
        "}"
    ;





    BasicObjectDeclaration implements ObjectDeclaration =
        Name
    ;

    ConcreteObjectDeclaration implements ObjectDeclaration =
        Name ":" MCObjectType
    ;

    AnonymousObjectDeclaration implements ObjectDeclaration =
        ":" MCObjectType
    ;

    ClassObjectDeclaration implements ObjectDeclaration =
        "class" MCObjectType
    ;





    BasicArrow implements Arrow =
        toLeft:["->"] | toRight:["<-"]
    ;

    DashedArrow implements Arrow =
        toLeft:["-->"] | toRight:["<--"]
    ;






    MethodAction implements Action =
        MethodModifier*
        ["static"]?
        Name
        Arguments?
    ;

    interface MethodModifier;

    TriggerModifier implements MethodModifier =
        "trigger"
    ;

    ConstructorAction extends MethodAction =
        "new" Name Arguments?
    ;

    IncompleteExpression implements Expression =
        "..."
    ;

    ReturnAction implements Action =
        "return"? Result?
    ;

    Result =
        incomplete:["..."] | Literal
    ;

    ExceptionAction implements Action =
        "throws" Name Arguments?
    ;
}
