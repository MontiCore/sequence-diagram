/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package de.monticore.lang;

/**
 * @author Robin Wolters
*/

grammar SD extends de.monticore.java.JavaDSL, ocl.monticoreocl.OCL, de.monticore.types.Types { 
       
    /*========================================================================*/
    /*=============================== TOKENS =================================*/
    /*========================================================================*/
    
          
    /*========================================================================*/
    /*=========================== CompilationUnit ============================*/
    /*========================================================================*/
    
    /** ASTSDArtifact represents the whole compilation unit
      @attribute packageDeclaration Optional package declaration of this sequence diagram
      @attribute importStatements List of imported elements
      @attribute sequenceDiagram Actual sequence diagram
    */  
    SDArtifact = 
    	PackageDeclaration?
    	ImportStatement*
    	SequenceDiagram;
    
    /** ASTPackageDeclaration represents the declaration of a SD package
      @attribute qualifiedName Qualified name of the package (keywords allowed)
    */  	
    PackageDeclaration = 
    	"package" 
    	QualifiedName&
    	";";
    
    /** ASTImportStatement represents an import statement
      @attribute qualifiedName Qualified name of an import (keywords allowed)
    */  	
    ImportStatement = 
    	"import"
    	QualifiedName&
    	";";
    	
    /*========================================================================*/
    /*============================ ENUMERATIONS ==============================*/
    /*========================================================================*/
    
    enum Arrow = 
    	LEFT: "<-"  | RIGHT: "->" ;
    enum DashedArrow = 
    	LEFT: "<--" | RIGHT: "-->";

    /*========================================================================*/
    /*================== INTERFACES AND EXTERNAL SYMBOLS =====================*/
    /*========================================================================*/

    /** ASTInteraction stands for all the different kinds of actions that are
        possible within a sequence diagram.
        These are method calls (including constructor calls), return statements
        and exceptions. 
    */  
    interface Interaction;

    /*========================================================================*/
    /*=================== Global Sequence Diagram Stuff ======================*/
    /*========================================================================*/

    /** ASTSequenceDiagram represents the actual sequence diagram
      @attribute sDStereotypes List of optional stereotypes for the SD
      @attribute sDCompleteness Optional "special" stereotype representing the 
      			 SD completeness (free, complete, initial, visible)
      @attribute name Name of the sequence diagram
      @attribute objectDeclarations List of initial objects visible in the SD
      @attribute sdElements List of possible syntax elements of an SD 
    */  
	symbol scope SequenceDiagram = 
		"sequencediagram" 
		SDStereotype* 
		SDCompleteness? 
		Name 
		"{" 
		(ObjectDeclaration ";")*
		SDElement* 
		"}";
		
	/** ASTObjectDeclaration represents the declaration of an SD object
      @attribute sDStereotypes List of optional stereotypes for the object
      @attribute sDCompleteness Optional "special" stereotype representing the 
      			 object's completeness (free, complete, initial, visible)
      @attribute name Name of the object (may be empty when anonymous with type)
     				  Can also be used when refering to static classes
      @attribute ofType Type of the object (may be empty when name is set)
    */  
	symbol ObjectDeclaration = 
		SDStereotype*
		SDCompleteness?
		(	
			Name |
			Name ":" ofType:Name |
			":" ofType:Name |
			["class"] Name
		);	

	/** ASTSDElement represents a syntax element of a sequence diagram,
	    which can be an activity, interaction, OCL statement or java statement
      @attribute sDActivity Activity which contains further elements 
      			 (known from the typical vertical blocks in visual SDs)
      @attribute interaction Interaction (method, return or exception)
      @attribute sDOCL Statement written in OCL language
      @attribute sDJava Statement written in Java DSL
    */  
	SDElement = 
		SDActivity |
		(Interaction ";") | 
		SDOCL | 
		SDJava;

	/** ASTSDActivity represents an activity which contains further elements 
        (known from the typical vertical blocks in visual SDs)
	    which can be an activity, interaction, OCL statement or java statement
      @attribute sDElements List of SDElements that are subordinate to this activity
    */ 
	SDActivity = 
		"{"
		SDElement*
		"}";
	
	/** ASTObjectReference represents a reference to a declared (or new) object
      @attribute name Name of the referenced and previously declared object
      @attribute inlineDeclaration ObjectDeclaration which introduces a new object
    */ 	
	ObjectReference = 
		Name |
		"(" inlineDeclaration: ObjectDeclaration ")";
			
	/** ASTSDStereotype represents a stereotype for SDs (simpler variant than common)
      @attribute name Name of the stereotyoe
    */ 		
	SDStereotype = 
		"<<" Name ">>";
	
	/** ASTSDCompleteness represents a special kind of stereotype known in SDs
      @attribute completeness Completeness in String representation
      			 Can be one of the following: 
      			 - .../<<match:free>> (default)
      			 - (C)/<<match:complete>> 
      			 - <<match:visible>>
      			 - <<match:initial>>
    */ 	
	SDCompleteness =
		(
		completeness : "(C)" |
		completeness : "..." |
		completeness : "<<match:complete>>"|
		completeness : "<<match:free>>"    |
		completeness : "<<match:visible>>" |
		completeness : "<<match:initial>>" 
		);
	
    /*========================================================================*/
    /*=========================== Interactions ===============================*/
    /*========================================================================*/

	/** ASTMethodCall represents a regular method or constructor call as one kind of interaction
      @attribute left ObjectReference that occurs first (left)
      @attribute arrow Kind of arrow that shows the call direction
      @attribute right ObjectReference that occurs second (right)
      @attribute sDStereotype Optional method stereotype 
      @attribute method Method body of the interaction
    */ 	
	MethodCall implements Interaction = 
		left:ObjectReference 
		Arrow 
		right:ObjectReference 
		":" 
		SDStereotype?
		Method;
		
	/** ASTMethodCall represents a regular return as one kind of interaction
      @attribute left ObjectReference that occurs first (left)
      @attribute dashedArrow Kind of dashed arrow that shows the call direction
      @attribute right ObjectReference that occurs second (right)
      @attribute returnStatement Return statement of this interaction
    */ 	
	Return implements Interaction = 
		left:ObjectReference 
		DashedArrow 
		right:ObjectReference 
		":" 
		ReturnStatement?;
	
	/** ASTException represents an exception as one kind of interaction
      @attribute left ObjectReference that occurs first (left)
      @attribute dashedArrow Kind of dashed arrow that shows the call direction
      @attribute right ObjectReference that occurs second (right)
      @attribute Name Name of the exception type
      @attribute args Arguments for the exception constructor
    */ 	
	Exception implements Interaction = 
		left:ObjectReference
		DashedArrow 
		right:ObjectReference 
		":" 
		Name
		Args?;
	
	/** ASTMethod represents the method body of a method call
      @attribute staticModifier Optional modifier that marks this method as a static call
      @attribute Name Name of method
      @attribute args Arguments for the method
    */ 		
	Method = 
		StaticModifier?
		Name 
		Args?;
		
	/** ASTConstructor represents a special kind of method body, a constructor
      @attribute Name Name of constructor (i.e. class)
      @attribute args Arguments for the constructor
    */ 		
	Constructor extends Method =
		"new" 
		Name
		Args?;
	
	/** ASTStaticModifier modifier that marks a method as a static call
    */ 					
	StaticModifier = 
		["static"]?;
	
	/** ASTArgs represents a list of parameters within brackets ()
	    Note: Used this layer as syntactic sugar to evaluate incomplete 
	    parameter lists in ASTs more easily
      @attribute paramList List of parameters or ... (incomplete)
    */ 				
	Args = 
		"("
		ParamList?
		")";
		
	/** ASTParamList represents a List of parameters or ... (incomplete)
      @attribute incomplete Marks this list as incomplete
      @attribute params	List of parameters
    */ 		
	ParamList =
		incomplete:["..."] |
		( (Param ",")* Param);

	/** ASTParam represents a parameter which can be a string, variable or Integer
      @attribute string Static string parameter
      @attribute reference Reference to a variable as parameter
      @attribute num_Int Static integer parameter
    */ 				
	Param = 
		String | 
		reference: QualifiedName | 
		Num_Int;
	
	/** ASTReturnStatements represents a return statement which may have a result
      @attribute result Optional result that gets returned
    */ 		
	ReturnStatement = 
		"return" 
		Result?;
	
	/** ASTResult represents a result returned by a return statement
      @attribute incomplete Marks the result as incomplete
      @attribute value A name representing a variable or enum
    */ 		
	Result = 
		incomplete:["..."] |
		value: Param;
		
    /*========================================================================*/
    /*=================== Integration of other Languages =====================*/
    /*========================================================================*/
	
	/** ASTSDOCL represents an OCL element within a SD
      @attribute context Optional OCL context (variable or class) for a constraint
      @attribute oCLExpression Expression in OCL language
    */ 	
	SDOCL = 
		"<" 
		(context:Name ":")? 
		"["
		OCLExpression
		"]"
		">";
	
	/** ASTSDJava represents an java statement within a SD
      @attribute blockStatement Statement in JavaDSL
    */ 	
	SDJava = 
		"java" ":" 
		blockStatement:JavaBlock;

    
}
