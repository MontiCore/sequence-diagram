/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

/* Alpha-version: This is intended to become a MontiCore stable grammar. */

// TODO: Kommentierung im stil zB der Klassendiagramme fehlt.

grammar SD4Development extends 
                   de.monticore.lang.SDBasis,
                               /*
                                * ExpressionBasis is replaced by OCLExpressions 
                                * when THE GRAMMAR IS IMPLEMENTED
                                * ocl.monticore.OCLExpressions,
                                */
// TODO: aber das ist sie doch: unter  de.monticore.expressions.OCLExpressions,
// evtl. in Kombination mit anderen Expressions?
                   de.monticore.expressions.ExpressionsBasis,
                   de.monticore.literals.MCCommonLiterals   {

  start SDArtifact;

  /*
   * Actions for a triggering message.
   * Triggers are used e.g. in tests to start the test execution
   * (as opposed to normal interactions that are observations)
   */
// todo: key(trigger), static (da weiss ich es nicht?-> marita fragen)
  SDCall implements SDAction =
    "trigger"? ["static"]? Name Arguments?;

  /*
   * Actions for creation of a new object.
   * This may also hint towards a Builder/Factory call in the implementation:
   * and is open to the tool developer.
   */
  SDNew implements SDAction =
    "new" MCQualifiedName Arguments?;

  /*
   * Actions for returns.
   * This allows "return", "return 5", and "return ..." for an 
   * unspecified value
   */
  SDReturn implements SDAction =
    ("return" Expression?)?;

  /*
   * Actions for exceptions,
   * which in this context can be interpreted as special 
   * form of "return"
   */
  SDThrow implements SDAction =
    "throw" MCQualifiedName Arguments?;

  /*
   * Interactions ending calls:
   * i.d. the arrow shows that a return comes (the return statement can
   * but need not be given explicitly)
   */
  SDEndCall implements SDInteraction =
    SDTarget? SDEndCallArrow
    SDSource?
    ":" SDAction ";";

  SDEndCallArrow = {noSpace(2)}? "<" "-";

  /**
   * SDIncompleteExpression is introduced to enable modeling of
   * incomplete specifications of arguments, for example, used in
   * method invocations, exceptions, returns, etc.
   */
  SDIncompleteExpression implements Expression = "...";

  /**
   * SDClassTarget enables using classes as the targets of interactions.
   * This enables modeling the invocation of static methods.
   */
  SDClassTarget implements SDTarget =
    "class" MCObjectType;

  /*
  SDOCLCondition and SDOCLAssignment are added as soon as OCL is implemented.
// TODO: sollten wir eigentlich weitgehend haben, wenn nicht kann man auch mal CommonExpr. nehmen
// key ...
  SDCondition implements SDElement =
    "assert" OCLExpression ";";

// und auch das l�sst sich schon definieren?
// �brigens: f�r Variablen dieser Art braucht es dann einen Scope,
// deshalb w�re SDBody eine Option
  SDVariableDeclaration implements SDElement =
    LetDeclaration;
  */
}
