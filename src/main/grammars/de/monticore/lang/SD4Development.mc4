/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

/* Alpha-version: This is intended to become a MontiCore stable grammar. */

/* TODO: Kommentierung im stil zB der Klassendiagramme fehlt.
 * OKa: Ich f√ºhre die Kommentierung ein, sobald der Inhalt der Grammatik stimmt,
 *      um Arbeitsaufwand zu sparen.
 */
grammar SD4Development extends
                   de.monticore.lang.SDBasis,
                   de.monticore.literals.MCCommonLiterals,
                   /*
                    * Expressions grammars are replaced by OCLExpressions
                    * when THE GRAMMAR IS IMPLEMENTED
                    */
                    // ocl.monticore.OCLExpressions,
                   de.monticore.expressions.AssignmentExpressions,
                   de.monticore.expressions.OCLExpressions {

  start SDArtifact;

  /*
   * Actions for a triggering message.
   * Triggers are used e.g. in tests to start the test execution
   * (as opposed to normal interactions that are observations)
   */
  SDCall implements SDAction =
    [key("trigger")]? [key("static")]? Name Arguments?;

  /*
   * Actions for creation of a new object.
   * This may also hint towards a Builder/Factory call in the implementation:
   * and is open to the tool developer.
   */
  SDNew implements SDAction =
    "new" MCQualifiedName Arguments?;

  /*
   * Actions for returns.
   * This allows "return", "return 5", and "return ..." for an 
   * unspecified value
   */
  SDReturn implements SDAction =
    ("return" Expression?)?;

  /*
   * Actions for exceptions,
   * which in this context can be interpreted as special 
   * form of "return"
   */
  SDThrow implements SDAction =
    "throw" MCQualifiedName Arguments?;

  /*
   * Interactions ending calls:
   * i.d. the arrow shows that a return comes (the return statement can
   * but need not be given explicitly)
   */
  SDEndCall implements SDInteraction =
    SDTarget? SDEndCallArrow
    SDSource?
    ":" SDAction ";";

  SDEndCallArrow = {noSpace(2)}? "<" "-";

  /**
   * SDIncompleteExpression is introduced to enable modeling of
   * incomplete specifications of arguments, for example, used in
   * method invocations, exceptions, returns, etc.
   */
  SDIncompleteExpression implements Expression = "...";

  /**
   * SDClassTarget enables using classes as the targets of interactions.
   * This enables modeling the invocation of static methods.
   */
  SDClassTarget implements SDTarget =
    "class" MCObjectType;

  /*
   * Required extensions for OCL externals
   */
  EDeclaration = Expression; // coco: only AssignmentExpressions
  ExtType = MCObjectType;

  // SDOCLCondition and SDOCLAssignment are added as soon as OCL is implemented.
  SDCondition implements SDElement =
    key("assert") Expression ";";

  SDVariableDeclaration implements SDElement =
    key("let") assignment:Expression ";" // coco: only AssignmentExpressions
    SDBody;
}
