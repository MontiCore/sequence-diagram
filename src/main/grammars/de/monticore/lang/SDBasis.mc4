/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang;

/* Alpha-version: This is intended to become a MontiCore stable grammar. */

/* TODO: Kommentierung im stil zB der Klassendiagramme fehlt.
 * OKa: Ich fÃ¼hre die Kommentierung ein, sobald der Inhalt der Grammatik stimmt,
 *      um Arbeitsaufwand zu sparen.
 */
component grammar SDBasis extends de.monticore.types.MCBasicTypes,
                                  de.monticore.types.BasicTypeSymbols,
                                  de.monticore.UMLStereotype {

  SDArtifact =
    ("package" MCQualifiedName& ";")?
    MCImportStatement*
    SequenceDiagram;

  symbol scope SequenceDiagram =
    Stereotype? SDModifier* "sequencediagram" Name "{"
      SDObject*
      SDBody
    "}";

  scope SDBody = SDElement*;

  /*
   * Modifiers for sequence diagrams and objects.
   *
   * They are used to improve the possible use of sequence diagrams.
   * See [Rum17] B. Rumpe: Agile Modeling with UML: 
   * Code Generation, Testing, Refactoring. Springer International, May 2017. 
   * or also: http://mbse.se-rwth.de/
   */
   interface SDModifier;

   SDCompleteModifier implements SDModifier =
     {noSpace(2,3)}? "(" key("c") ")" | key("complete");

   SDFreeModifier implements SDModifier =
     "..." | key("free");

   SDInitialModifier implements SDModifier =
     key("initial");

   SDVisibleModifier implements SDModifier =
     key("visible");

  /**
   * Object definition introducing a new object in form of
   * a VariableSymbol (by implementing Variable).
   *
   * Sequence diagrams in graphical notation allow to introduce
   * anonymous objects. Unfortunately in a textual notation object
   * names are needed to refer to the object as source or target
   * of an interaction. The use of anonymous objects is therefore
   * not possible with this grammar.
   */
  SDObject implements Variable =
    Stereotype? SDModifier* Name (":" MCObjectType)? ";";

  /**
   * Extension point for construct defined in a sequence diagram,
   * including invariants and interactions
   */
  interface SDElement;

  /*
   * Extension point for Interactions.
   * To enable a uniform handling of interactions, the nonterminals
   * "source" defining the source of the interaction, 
   * "target" defining its target, and 
   * "action" for the action are defined here 
   * (without concrete syntactic order).
   */
  interface SDInteraction extends SDElement =
    SDSource? SDTarget? SDAction;

  /*
   * Possible sources of interactions.
   */
  interface SDSource;
  SDObjectSource implements SDSource = Name@Variable;

  /*
   * Possible targets of interactions.
   */
  interface SDTarget;
  SDObjectTarget implements SDTarget = Name@Variable;

  /**
   * Extension point: form of actions.
   * this contains the action part of an interaction, but 
   * not sender and receiver.
   */
  interface SDAction;

  /*
   * Sending messages: the most common interaction.
   * Including the curly brackets starts an activity bar on the lifeline
   * of the target object that ends with the closing curly bracket.
   */
  SDSendMessage implements SDInteraction =
    SDSource? "->" SDTarget? ":" SDAction (";" | "{" SDElement* "}");
    
}
