/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.sdbasis._symboltable;

import de.monticore.lang.sdbasis.SDBasisMill;
import de.monticore.lang.sdbasis._ast.ASTSDObject;
import de.monticore.lang.sdbasis.types.FullSDBasisSynthesizer;
import de.monticore.symbols.basicsymbols._symboltable.VariableSymbol;
import de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol;
import de.monticore.types.check.SymTypeExpressionFactory;
import de.monticore.types.check.TypeCheckResult;
import de.monticore.types.mcbasictypes._ast.ASTMCObjectType;
import de.se_rwth.commons.logging.Log;

public class SDBasisScopesGenitor extends SDBasisScopesGenitorTOP {

  private final FullSDBasisSynthesizer synthesizer = new FullSDBasisSynthesizer();

  /* generated by template core.Constructor*/
  public SDBasisScopesGenitor() {
    super();
  }

  @Override
  public void endVisit(ASTSDObject node) {
    VariableSymbol symbol = node.getSymbol();

    if (node.isPresentMCObjectType()) {
      ASTMCObjectType objectType = node.getMCObjectType();

      final TypeCheckResult typeResult = synthesizer.synthesizeType(objectType);
      if (!typeResult.isPresentResult()) {
        Log.error(String.format("0xB0005: The type (%s) of the object (%s) could not be calculated",
          SDBasisMill.prettyPrint(objectType, false), node.getName()));
      }
      else {
        symbol.setType(typeResult.getResult());
      }
    }
    else {
      OOTypeSymbol objectType = new OOTypeSymbol("Object");
      symbol.setType(SymTypeExpressionFactory.createTypeExpression(objectType));
    }
  }
}
